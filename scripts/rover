#!/usr/bin/perl
#****************************************************************************
# rover - Command line interface to Rover perl module
#
#
#****************************************************************************
use strict;
use Rover;

use POSIX;
use IO::File;
use Carp;

use Getopt::Long qw( :config no_ignore_case bundling );

# Sorry, but Term::ReadLine is too unpredictable for threads
#
#use Term::ReadLine;

# Global rover configs controlled by GetOptions result
#
our @rulesets = ();		# Array of rulesets to run
our @hosts = ();		# Array of hosts to run on
our $auth = 1;			# Prompt for authentication
our $quick_command = "";	# Run quick command with supplied string
our $shell = 0;			# Run shell or not
our $getroot = 0;		# Run as root or not
our $search_logs = "";		# Search string for log search
our $get_help = 0;		# Print help message
our $banner = 1;		# Print banner of things to do
our $pick_hosts = 0;		# Pick hosts from list
our $list_rulesets = 0;		# List available rulesets
our $list_rulesets_long = 0;	# Do a long list of rulesets
our $config_file = "";		# Location of config file
our $logs_dir = "";		# Location of logs directory
our $max_threads = 0;		# Number of threads to run in parralell
our $debug = 0;			# Debug level to run at
our $upgrade = 0;		# Upgrade from previous version

sub validate_opts {
# This function gathers the options passed to rover and configures the
# appropriate rover settings.
#
  my $rover = shift;

  my $search_string = "";
  my %options = (
	"config-file=s" => \$config_file,
	"logs-dir=s" => \$logs_dir,
	"p|pick" => \$pick_hosts,

	"f|forks=i" => \$max_threads,

	"v|verbose+" => \$debug,
	"d|debug" => sub {
		$debug = 3;
		$Expect::Exp_Internal=1;
		$Expect::Log_Stdout=1;
		$Expect::Debug=3;
	},

	"r|ruleset=s" => \@rulesets,
	"q|quick-command=s" => \$quick_command,
	"l|list" => \$list_rulesets,
	"L|long-list" => \$list_rulesets_long,

	"s|shell" => \$shell,
	"R|root" => \$getroot,
	"S|search=s" => \$search_string,
	"h|help" => \$get_help,
	"u|upgrade" => \$upgrade,
	"auth!" => \$auth,
	"banner!" => \$banner,
	"version" => \&VERSION_MESSAGE,
  );
 
  if ( ! GetOptions(%options) ) {
    usage($rover);
    return(1);
  }

 # Save options to the object
 #
  $rover->config_file($config_file) if $config_file;
  $rover->logs_dir($logs_dir) if $logs_dir;
  $rover->max_threads($max_threads) if $max_threads;
  $rover->debug($debug) if $debug;

  @rulesets = split(/,/,join(',',@rulesets));

  if ($get_help) {
    usage($rover);
    return(0);
  }

 # Run a configuration upgrade
 #
  if ( $upgrade ) {
    run_upgrade($rover);
    exit(1);
  }

 # Search log files here
 #
  if ($search_string) {

   # Find last run and search those logs
    opendir(LAST_RUN, $rover->logs_dir) or die "Error: cannot open logs directroy: ". $rover->logs_dir ."\n";
    my $lastrun_dir = "";
    my $lastrun_ctime = 0;
    foreach my $file (readdir(LAST_RUN)) {
      if ( ! -d $rover->logs_dir ."/". $file ) { next; }
      if ( $file =~ m/^[\.]+$/ ) { next; }
      my @fstat = stat($rover->logs_dir ."/". $file);
      if ( $fstat[10] > $lastrun_ctime ) {
        $lastrun_dir = $file;
        $lastrun_ctime = $fstat[10];
      }
    }
    close(LAST_RUN);

   # Actually do the searching
    opendir(LOGS, $rover->logs_dir ."/". $lastrun_dir)
	or die "Error: cannot open logs directroy: ". $rover->logs_dir ."/". $lastrun_dir ."\n";
    foreach my $file (readdir(LOGS)) {
      next if ( $file =~ m/^[\.]+$/ ) ;
      open(FIN, $rover->logs_dir ."/$lastrun_dir/$file") or next;
      my $host_name = $file;
      $host_name =~ s/\.log// ;

      while (<FIN>) {
        chomp $_ ;
        if ( m/$search_string/ ) {
          print "$host_name,$_\n";
        }
      }
      close(FIN);
    }
    close(LOGS);

    exit(0);
  }
  return(1);
}

sub VERSION_MESSAGE {
  print "Rover version $Rover::VERSION\n";
  exit(0);
}

sub usage {
# Print a nice little help page regarding the command line usage
#
  my $rover = shift;
  print "Usage: rover [options] [-r <name> [-r <name> ...]]  [-q <command>]\n";
  print "\n";
  print "  -r|--ruleset <name>\n";
  print "                 Specify which ruleset to run.  Multiple rulesets are allowed.\n";
  print "\n";
  print "  -q|--quick-command <command>\n";
  print "                 Run quick command.  Puts supplied string insude\n";
  print "                 an execute() ruleset command, so you dont need to\n";
  print "\n";
  print "  --config-file <file>\n";
  print "                 Rover commands file.  Default is\n";
  print "                 ". $rover->config_file .".\n";
  print "\n";
  print "  --logs-dir <dir>\n";
  print "                 Specify an alternative location for the logs directory.\n";
  print "                 The default is to use '". $rover->logs_dir ."'\n";
  print "\n";
  print "  -S|--search <regex>\n";
  print "                 Search log files from last run for string <regex>\n";
  print "\n";
  print "  -p|--pick      Interactively pick the hosts to run Rover against.\n";
  print "\n";
  print "  -l|--list      List configured rulesets\n";
  print "  -L|--long-list Long list configured rulesets\n";
  print "  -s|--shell     Run rover config shell\n";
  print "  -R|--root      Run as root\n";
  print "  -f|--forks n   Use 'n' threads in parallel for host processing\n";
  print "                 Default is ". $rover->max_threads .".\n";
  print "  -v|--verbose   Turns up verbosity (more -v means more verbose).\n";
  print "  -d|--debug     Turns debug mode on for Rover and Expect.\n";
  print "  -h|--help      Print this help message\n";
  print "\n";
  print "  -u|--upgrade   Upgrade hosts and rulesets from previous version\n";
  print "\n";
  print "  --no-auth      Dont ask for passwords prior to running\n";
  print "  --no-banner    Dont display banner\n";
  print "  --version      Print Rover version and exit\n";
  print "\n";

  return(1);
}

sub run_upgrade {
# Upgrade from previous version
#
  my $rover = shift;
  my $r = new Rover;

  $r->config_file($rover->config_file);
  $r->logs_dir($rover->logs_dir);
  $r->max_threads($rover->max_threads);
  $r->debug($rover->debug);

 # Confirm that an upgrade is what we want to do
 #
  print "\nWarning: This will overwrite current Rover configuration\n";
  print "\nContinue [y/N]: ";

  my $answer = lc(<>);
  chomp $answer;
  if ( $answer ne 'y' && $answer ne 'yes' ) { exit(0); }

 # Check that the config.run and hosts.txt file exist
 #
  if ( ! stat($ENV{'HOME'}."/.rover/hosts.txt") || ! stat($ENV{'HOME'}."/.rover/config.run") ) {
    print "\nError: Full configuration not found at \"$ENV{'HOME'}/.rover\".\n";
    print "Make sure the following files from a previous Rover install exist:\n";
    print "\t$ENV{'HOME'}/.rover/config.run\n";
    print "\t$ENV{'HOME'}/.rover/hosts.txt\n";
    print "\n";
    exit(1);
  }

 # Read in hosts information, split out columns, store for later use
 #
  my @OLD_HOSTS = ();
  open(OLD_HOSTS, $ENV{'HOME'}."/.rover/hosts.txt");
  while (<OLD_HOSTS>) {
    chomp $_;
    my @host_info = split(/,/, $_);

    push (@OLD_HOSTS, \@host_info);
  }
  close(OLD_HOSTS);

  my $max_column = 1;
  foreach my $href ( @OLD_HOSTS ) {
    if ( $max_column < @{$href} ) {
      $max_column = @{$href};
    }
  }

  my $os_col = undef;
  my $user_col = undef;
  my $desc_col = undef;

 # If we have more then one column in hosts.txt, ask if we want to use that information
 # when defining the host object
 #
  if ( $max_column > 1 ) {
    print "\nYour hosts.txt file has multiple columns, would you like to add these\n";
    print "columns to the host details?: [Y/n]: ";
    $answer = lc(<>);
    chomp $answer;

    if ( $answer ne "n" && $answer ne "no" ) {
      print "\nHostname       ";
      for (my $i=1; $i<$max_column; $i++) {
        my $j = $i+1;
        print "#$j-UNDEFINED   ";
      }
      print "\n";

      for (my $i=1; $i<5; $i++) {
        for (my $j=0; $j<$max_column; $j++) {
          print substr($OLD_HOSTS[$i]->[$j]." "x14,0,14) ." ";
        }
        print "\n";
      }

      print "\nOS Column #: ";
      $answer = <>; chomp $answer;
      if ( $answer =~ m/[2-$max_column]/ ) { $os_col = $answer; }

      print "Username Column #: ";
      $answer = <>; chomp $answer;
      if ( $answer =~ m/[2-$max_column]/ ) { $user_col = $answer; }

      print "Description Column #: ";
      $answer = <>; chomp $answer;
      if ( $answer =~ m/[2-$max_column]/ ) { $desc_col = $answer; }
    }
  }
  print "\n";

 # Actually add the hosts to Rover, with column data if specified
 #
  foreach my $href (@OLD_HOSTS) {
    print "Adding host: ". substr($href->[0] ."."x14, 0, 14) ;
    $r->add_hosts($href->[0]);
    my $host_obj = $r->host($href->[0]);

    if ( $host_obj ) {
      print "done\n";
      if ( $os_col ) {
        $host_obj->os( $href->[$os_col-1] );
        print "\tUpdating OS: ". $href->[$os_col-1] ."\n" if $r->debug;
      }
      if ( $user_col ) {
        $host_obj->username( $href->[$user_col-1] );
        print "\tUpdating Username: ". $href->[$user_col-1] ."\n" if $r->debug;
      }
      if ( $desc_col ) {
        $host_obj->description( $href->[$desc_col-1] );
        print "\tUpdating Description: ". $href->[$desc_col-1] ."\n" if $r->debug;
      }
    } else {
      print "failed\n";
    }
  }
  print "\n";

 # Read the old config.run and grab ruleset data.  Add it to Rover object
 #
  open(OLD_CONFIG, $ENV{'HOME'} ."/.rover/config.run");
  my $current_ruleset = undef;
  my $current_ruleset_obj = undef;
  while (<OLD_CONFIG>) {
    chomp $_;
  
    next if m/^[\w]+:[\w]+;$/ ;
    next if m/^[  ]*$/ ;
  
   # We are currently reading a ruleset
    if ( $current_ruleset ) {

     # End of ruleset definition
      if ( m/^[   ]*\};[  ]*$/ ) {
        print "done\n" if $current_ruleset_obj;

        $current_ruleset = undef;
        $current_ruleset_obj = undef;
      }
  
     # We found a rule definition for this ruleset
      if ( m/^[\s\t]*([\w]+)\((.+)\);[\s\t]*$/ ) {
        next if ! $current_ruleset_obj ;
        my $method = $1;
        my $args = $2;

       # Convert userdel and groupdel to execute statements
        if ( $method eq "userdel" || $method eq "groupdel" ) {
          print "\tWarning: $method being converted to execute\n";
          $args = "$method $args";
          $method = "execute";
        }

       # Sorry, userlist and grouplist no longer included
        if ( $method eq "userlist" || $method eq "grouplist" ) {
          print "\tWarning: $method not implemented in Rover 3.0, ruleset will probably fail.\n";
        }
        print "\trule: $method($args);\n" if $r->debug();
        $current_ruleset_obj->add($method, $args);
      }
      next;
    }
  
   # We found the start of a ruleset definition, exclude GENERAL ruleset
    if ( m/^[     ]*([\w]+):{[    ]*$/ ) {
      $current_ruleset = $1;
      next if $current_ruleset eq "GENERAL";

      print "Adding ruleset: ". substr($current_ruleset ."."x20,0,20) ;
      $r->add_rulesets($current_ruleset);
      $current_ruleset_obj = $r->ruleset($current_ruleset);
      if ( ! $current_ruleset_obj ) {
        print "failed\n";
      }
    }
  }
  close OLD_CONFIG ;
  print "\n";

 # Back up old config file, save new one
 #
  print "Saving old config...";
  if ( system("cp ". $r->config_file ." ". $r->config_file .".bak >/dev/null 2>&1") == 0 ) {
    print "done\n";
  } else {
    print "failed\n";
  }
  
  print "Saving new config...";
  if ( $r->save() ) {
    print "done\n";
  } else {
    print "failed\n";
  }
}

sub pick_hosts {
# Pick hosts interactively.
#
  my $rover = shift;

  my $rows = 15;
  my $position = 0;

  my @host_list = sort $rover->host();
  my @host_list_final = ();
  my $host_count = @host_list;

  my %selected_hosts = ();
  foreach (@host_list) { $selected_hosts{$_} = 1; }

  my $prompt_help = "<U>=Up  <D>=Down  <T>=Top  <B>=Bottom\n";
  $prompt_help .=   "<#>=Toggle Entry  <+>=Select All  <->=Deselect All\n";
  $prompt_help .=   "<#:#+>=Select A Range  <#:#->=Deselect A Range  <O>=Ok  <C>=Cancel\n";
  $prompt_help .=   "<SH>=Sort by Host  <SO>=Sort by OS  <SD>=Sort by Description\n";

  my $prompt = "pick> ";

  my %callbacks = (
	U => sub {
	  # Scroll down one page of hosts, unless we are at the end
	  #
		my $tmp_pos = $position - $rows ;
		if ( $tmp_pos >= 0 ) {
		  $position = $tmp_pos;
		}
		return(1);
	},
	D => sub {
	  # Scroll up one page of hosts, unless we are at the beginning
	  #
		my $tmp_pos = $position + $rows ;
		if ( $tmp_pos <= $host_count ) {
		  $position = $tmp_pos;
		}
		return(1);
	},
	T => sub {
	  # Start at the begining of the list
	  #
		$position = 0;
		return(1);
	},
	B => sub {
	  # Scroll to the last page of the list
	  #
		my $tmp_pos = 0;
		while ($tmp_pos < $host_count) {
		  $position = $tmp_pos;
		  $tmp_pos += $rows;
		}
		return(1);
	},
	SH => sub {
	  # Sort by hostname
	  #
		@host_list = sort $rover->host();
		return(1);
	},
	SO => sub {
	  # Sort by OS
	  #
		@host_list = sort { $rover->host($a)->os cmp $rover->host($b)->os } $rover->host();
		return(1);
	},
	SD => sub {
	  # Sort by description
	  #
		@host_list = sort { $rover->host($a)->description cmp $rover->host($b)->description } $rover->host();
		return(1);
	},
	'+' => sub {
	  # Select all hosts
	  #
		foreach my $host (keys %selected_hosts) { $selected_hosts{$host} = 1; }
		return(1);
	},
	'-' => sub {
	  # Deselect all hosts
	  #
		foreach my $host (keys %selected_hosts) { $selected_hosts{$host} = 0; }
		return(1);
	},
	O => sub {
	  # Accept the current selection and continue
	  #
		foreach my $host (keys %selected_hosts) {
		  if ( $selected_hosts{$host} ) { push(@host_list_final, $host); }
		}
		return(1);
	},
	C => sub {
	  # Quit outright
	  #
		exit(0);
	},
	print_list => sub {
	  # Print a menu of hosts begining at our current position.
	  #
		my $hosts_to_print = $host_count - $position;
		if ( $hosts_to_print > ($rows) ) { $hosts_to_print = $rows };

		print "\n";

		my $k=1;
		my $cur_position = $position;
		for (my $i=$position; $i< ($position+$hosts_to_print); $i++) {
		  my $selected = " ";
		  if ( $selected_hosts{ $host_list[$cur_position] } ) { $selected = "X"; };
		  print "\t[$selected] ". substr($cur_position."."." "x6,0,6) . substr($host_list[$cur_position]." "x14,0,14) ;

		  my $host_obj = $rover->host($host_list[$cur_position]);
		  print substr($host_obj->os()." "x8,0,8) . substr($host_obj->description()." "x20,0,20) ;
		  print "\n";

		  $cur_position++;
		  $k++;
		}
		for ( ; $k<$rows; $k++) {print "\n";}

		print "\n\n". $prompt_help;
		return(1);
	},
  );

  system("clear");
  &{$callbacks{print_list}};
  print "\n$prompt";

  while ( <> ) {
    my $comm = $_ ;
    chomp $comm;
    $comm =~ m/^(\d+)[:]*(\d*)(\W*)$/;

    my ($start_pos, $end_pos, $identifier) = ($1, $2, $3);

    if ( $comm eq "O" ) {
     # Last command we expect, call routine and finish loop
     #
      &{$callbacks{$comm}} ;
      last;
    }
    system("clear");

    if ( $start_pos >= 0 && $start_pos ne "" ) {
     # If we found a number, we want to select/deselect/toggle the range
     #
      my $add = 1;
      if ( $identifier eq '-' ) {
        $add--;
      }

      if ( $end_pos ) {
       # This block if we found a range of numbers
       #
        if ( ! $identifier ) {
         # We didnt find an identifier, toggle range instead
         #
          for (my $i=$start_pos; $i<=$end_pos; $i++) {
            $selected_hosts{ $host_list[$i] } = abs($selected_hosts{ $host_list[$i] } -1);
          }
        } else {
         # Select or deselect hosts based on identifier
         #
          for (my $i=$start_pos; $i<=$end_pos; $i++) { $selected_hosts{ $host_list[$i] } = $add; }
        }

      } else {
       # Only chose one number, toggle that number
       #
        $selected_hosts{ $host_list[$start_pos] }  = abs($selected_hosts{ $host_list[$start_pos] }-1);
      }

    }

    if ( $callbacks{$comm} ) {
      &{$callbacks{$comm}} ;
    }

    &{$callbacks{print_list}} ;
    print "\n$prompt";
    next;
  }
  print "\n";

  return @host_list_final;
}

sub report_completion_status {
# Print completion report
#
  my $rover = shift;

  my %status = $rover->run_status();
  my $count_failed_hosts = $status{"failed_hosts"};
  if ( @{$count_failed_hosts} ) {
    my $total_hosts = $status{"num_hosts"};
    my $hosts_not_completed = $total_hosts - $status{"num_succeed"} - @{$status{"failed_hosts"}} ;

    print "\n-------------------\n";
    print "   FAILURE COUNT\n";
    print "-------------------\n";
    print "Bad Passwords   : ". $status{"failed_password"} ."\n";
    print "Root Failures   : ". $status{"failed_getroot"} ."\n";
    print "Profile Errors  : ". $status{"failed_profile"} ."\n";
    print "Network Errors  : ". $status{"failed_network"} ."\n";
    print "Failed Rulesets : ". $status{"failed_ruleset"} ."\n";
    if ( $hosts_not_completed ) {
      print "\n";
      print "Canceled        : $hosts_not_completed\n";
    }
    print "-------------------\n";
    print "Total: ". @{$count_failed_hosts} ."\n";
    print "\n";

    if ( $rover->debug() ) {
      print "Failed hosts:\n";
      foreach ( @{$status{"failed_hosts"}} ) { print "$_\n"; }
      print "\n";
    }
  } else {
    print "\nNo login failures recorded!\n\n";
  }

  return(1);
}

sub list_rulesets {
# List rulesets
#
  my $rover = shift;
  my @list_rulesets = ();
  if ( @rulesets ) {
    @list_rulesets = @rulesets ;
  } else {
    @list_rulesets = $rover->ruleset();
  }

  foreach my $ruleset ( sort @list_rulesets) {
    my $ruleset_obj = $rover->ruleset($ruleset);
    if ( ! $ruleset_obj ) {
      $rover->pwarn("Warning: Ruleset $ruleset does not exist\n");
      next;
    }

    print "$ruleset";
    if ( $ruleset_obj->description ) {
      print "\t- ". $ruleset_obj->description ;
    }
    print "\n";
    if ( $list_rulesets_long ) {
      foreach my $rule ( $ruleset_obj->list ) {
        print "\t$rule\n";
      }
      print "\n";
    }
  }
}

sub shell {
# Interactively run ruleset configuration tool.
#
  my ($rover) = @_;

  my $prompt = "rover> ";
  my %callbacks = (
	list => sub {
	  # List rulesets
	  #
		my ($rover, @args) = @_ ;
		if ( @args ) {
		  foreach my $regex ( @args ) {
		    my @all_rulesets = $rover->ruleset;
		    foreach my $ruleset ( grep(/$regex/, @all_rulesets) ) {
		      my $ruleset_obj = $rover->ruleset( $ruleset );
		      my $description = $ruleset_obj->description();

		      print "$ruleset";
		      print " - $description" if $description;
		      print "\n";

		      foreach my $rule ( $ruleset_obj->list() ) {
		        print "\t$rule\n";
		      }
		    }
		  }
		  print "\n";
		} else {
		  foreach my $ruleset ($rover->ruleset) {
		    my $ruleset_obj = $rover->ruleset( $ruleset );
		    my $description = $ruleset_obj->description();

		    print "$ruleset";
		    print "\t- $description" if $description;
		    print "\n";
		  }
		  print "\n";
		}
	},
	del => sub {
	  # Delete a ruleset
	  #
		my ($rover, @args) = @_ ;

		if ( ! @args ) {
		  print "Usage: del RULESET or /REGEX/\n";
		  return(0);
		}

		my @rulesets_to_delete = ();
		foreach my $regex (@args) {
		  @rulesets_to_delete = (@rulesets_to_delete, grep(/$regex/, ($rover->ruleset())));
		}

		if ( ! @rulesets_to_delete ) {
		  print "No ruleset(s) found\n";

		} else {
		  print "Delete following ruleset(s): @rulesets_to_delete\n";
		  print "[ Yes | no ]? ";
		  my $answer = <>;

		  if ( $answer =~ /[yY]/ ) {
		    foreach my $ruleset (@rulesets_to_delete) {
		      $rover->del_rulesets( @rulesets_to_delete );
		    }
		  }
		}

		print "\n";
	},
	new => sub {
	  # Create a new ruleset
	  #
		my ($rover, $name) = @_ ;

		if ( ! $name ) {
		  print "Usage: new <ruleset>\n";
		  return(1);
		}

		if ( $rover->ruleset( $name ) ) {
		  print "Error: Ruleset already exists\n";
		  return(1);
		}

		my ($fh, $filename);
		do { $filename = tmpnam() } until $fh = IO::File->new($filename, O_RDWR|O_CREAT|O_EXCL);

		my $editor = "vi";
		if ( $ENV{"EDITOR"} ) {
		  $editor = $ENV{"EDITOR"};
		}
		system("$editor $filename");

		$rover->add_rulesets( $name );
		my $ruleset_obj = $rover->ruleset( $name );

		$fh->autoflush(1);
		seek($fh, 0, 0);
		unlink $filename;

		while (<$fh>) {
		  chomp $_;
		  if ( ! m/^[    ]*([\w]+)[      ]*\((.+)\);/ ) { print "Error in line: $_\n"; next; }
		  my ($command, $args) = ($1, $2);

		  $ruleset_obj->add($command, $args);
		}
		close ($fh);
	},
	edit => sub {
	  # Edit an existing ruleset
	  #
		my ($rover, $name) = @_ ;

		if ( ! $name ) {
		  print "Usage: edit <ruleset>\n";
		  return(1);
		}

		if ( ! $rover->ruleset( $name ) ) {
		  print "Ruleset $name does not exist, use 'new $name' to create\n";
		  return(1);
		}
		my $ruleset_obj = $rover->ruleset( $name );

		my ($fh, $filename);
		do { $filename = tmpnam() } until $fh = IO::File->new($filename, O_RDWR|O_CREAT|O_EXCL);

		foreach ( $ruleset_obj->list() ) {
		  print $fh $_ ."\n";
		}

		$fh->autoflush(1);
		system("vi $filename");

		$fh->autoflush(1);
		seek($fh, 0, 0);
		unlink $filename;

		$ruleset_obj->clear();
		while (<$fh>) {
		  chomp $_;
		  if ( ! m/^[    ]*([\w]+)[      ]*\((.+)\);/ ) { print "Error in line: $_\n"; next; }
		  my ($command, $args) = ($1, $2);

		  $ruleset_obj->add($command, $args);
		}
		close($fh);
	},
	runlist => sub {
	  # Print all rulesets configured on all OS's
	  #
		foreach my $ruleset ( @rulesets ) {
		  my $ruleset_obj = $rover->ruleset( $ruleset );
		  my @tmp_array = $ruleset_obj->os_list();
		  @tmp_array = ("ALL") if ! @tmp_array;
		  print "$ruleset\t: @tmp_array\n";
		}
		print "\n";
	},
	runmod => sub {
	  # Modify the runlist
	  #
		my ($rover) = @_ ;

		print "Current Runlist:\n";
		foreach my $ruleset (@rulesets) { print "$ruleset\n"; }

		my @all_rulesets = $rover->ruleset();
		print "\nAvailable Rulesets: @all_rulesets\n\n";

		print "Enter rulest names one at a time, enter blank line to finish\n";
		my @new_rulesets = ();
		print "ruleset> ";
		while (<>) {
		  last if /^$/;
		  chomp $_;

		  if ( ! $rover->ruleset( $_ ) ) {
		    print "\nRuleset $_ does not exist, aborting with no changes\n";
		    @new_rulesets = ();
		    last;
		  }
		  push (@new_rulesets, $_);
		  print "ruleset> ";
		}
		if ( ! @new_rulesets ) {
		  print "\nNo changes made\n";
		} else {
		  print "\nNew runlist:\n";
		  foreach my $ruleset (@new_rulesets) { print "$ruleset\n"; }
		  @rulesets = @new_rulesets;
		}
		print "\n";
	},
	hosts => sub {
	  # List the hosts configured to run
	  #
		print "Hostname        OS\n";
		print "--------------------\n";
		foreach my $host ( sort( $rover->host() ) ) {
		  my $host_obj = $rover->host($host);
		  printf "%.15s %s\n", $host ." "x15, $host_obj->os;
		}
		print "\n";
	},
	save => sub { my $rover = shift; $rover->save(); },
	  # Save the current configuration
	  #
	mods => sub {
	  # List the registered modules
	  #
		my $rover = shift;
		foreach my $mod ( $rover->registered_modules() ) {
		  print "$mod\n";
		  foreach my $rule ( $rover->registered_rules($mod) ) {
		    print "\t$rule\n";
		  }
		}
		print "\n";
	},
	vars => sub {
	  # Print the values of registered variables for a specific module,
	  # or print them all if no argument is supplied
	  #
		my ($rover, @args) = @_ ;

		if ( ! @args ) {
		  print "Usage: vars RULESET or /REGEX/\n";
		  return(0);
		}

		my @modules = ();
		foreach my $regex (@args) {
		  @modules = (@modules, grep(/$regex/, $rover->registered_modules() ));
		}

		foreach my $mod (@modules) {
		  print "$mod\n";
		  foreach my $var ($rover->registered_vars( $mod ) ) {
		    my $var_name = $var;
		    $var_name =~ s/^.// ;
		    print "\t$var\n";
		  }
		}
		print "\n";
	},
	eval => sub {
	  # Evaluate a perl command
	  #
		my ($rover, @args) = @_ ;
		eval "@args" ;

		print $@ if $@;
	},
	help => sub {
	  # Print the help message
	  #
		print "Ruleset Commands\n";
		print "  list  RULESET or /REGEX/  Display contents of one or more rulesets\n";
		print "  del   RULESET or /REGEX/  Delete ruleset configuration\n";
		print "  new   RULESET             Create a new ruleset\n";
		print "  edit  RULESET             Edit an existing ruleset\n";
		print "\n";
		print "Run Commands\n";
		print "  runlist         Display rulesets to be ran by Rover\n";
		print "  runmod          Modify list of rulesets to be ran\n";
		print "\n";
		print "Rover Commands\n";
		print "  hosts           Display the targeted hosts\n";
		print "  save            Saves current configuration\n";
		print "  mods            Display list of registered modules and commands\n";
		print "  vars  MODULE    Display variables\n";
		print "\n";
		print "Other Commands\n";
		print "  eval            Evaluate a perl command\n";
		print "  help            Display this help message\n";
		print "  quit            Quit interactive command\n";
		print "  exit            Exit rover entirely\n";
		print "\n";
	},
	exit => sub { exit(0); },);
	  # Exit rover completely, do not continue processing rules
	  #

  print "\n";
  print "Rover shell -- version $Rover::VERSION\n";
  print "type \"help\" for a list of commands\n";
  print "\n";
  print $prompt ;

  while ( <> ) {
   # Readline loop for interactive shell
   #
    chomp $_;
    s/^[\s\t]*// ;
    if ( m/^$/ ) {
      print $prompt ;
      next;
    }

    my ($comm, @args) = split(/ /,$_);

    last if /quit\s*$/ ;

    if ( $callbacks{$comm} ) {
      &{$callbacks{$comm}}($rover, @args);;

    } else {
      print "command not found: $comm\n";
      print "type \"help\" for a list of commands\n";
      print "\n";
    }

    print $prompt ;
    next;
  }
  print "\n";

}

sub read_authentication {
# Gather user auth and privilage auth information
#
  my $rover = shift;

  print STDERR $rover->user,"'s password: ";
  system("stty -echo");
  my $user_pass = <STDIN>;
  chomp $user_pass;

  my @passwords = ();
  while ( $user_pass ne "" ) {
    print STDERR "\n";
    push(@passwords, $user_pass);
  
    print STDERR $rover->user,"'s password: ";
    $user_pass = <STDIN>;
    chomp $user_pass;
  }
  print STDERR "\n";
  $rover->user_credentials(@passwords);

  if ( $getroot ) {
    print STDERR "\n";
    print STDERR "root's password: ";
    my $root_pass = <STDIN>;
    chomp $root_pass;

    my @root_passwords = ();
    while ( $root_pass ne "" ) {
      print STDERR "\n";
      push(@root_passwords, $root_pass);

      print STDERR "root's password: ";
      $root_pass = <STDIN>;
      chomp $root_pass;
    }
    print STDERR "\n";
    $rover->root_credentials(@root_passwords);
  }
  system("stty echo");
}
#
#****************************************************************************
# Begin main execution
#
my $rover = new Rover;

# Validate opts and load the configuration file
#
if ( ! validate_opts($rover) ) {
  exit(-1);
}
$rover->load();
validate_opts($rover);  # override config file with specified opts

# Select random logs dir
#
my $old_logs_dir = $rover->logs_dir();
my $new_logs_dir = $rover->logs_dir() ."/". int(rand(999999));
if ( mkdir($new_logs_dir) ) {
  $rover->logs_dir( $new_logs_dir );
}

# Print the rulesets and, optionally, there contents
#
if ( $list_rulesets || $list_rulesets_long ) {
  list_rulesets($rover);
  exit(0);
}

# Modify the runlist with the quick command specified from the
# command line
#
if ( $quick_command ) {
  my $quick_ruleset = $rover->add_rulesets("Rover_Quick_Ruleset");
  $quick_ruleset->add("execute", $quick_command);

  @rulesets = ("Rover_Quick_Ruleset");
}

# Run shell after all options are parsed
#
if ($shell) {
  shell($rover);
}

@hosts = $rover->host();
# Allow user to pick hosts from a menu
#
if ( $pick_hosts ) {
  @hosts = pick_hosts($rover);
}

# Make sure we have something to do before continuing
#
if ( ! @rulesets || ! @hosts ) {
  print "\nNothing to do, exiting\n\n";
  exit(1);
}

# Display a brief banner about what we are going to do
#
if ( $banner ) {
  my @bool_text = ('No', 'Yes');

  print "\nRunning rulesets:\n";
  foreach my $ruleset ( @rulesets ) {
    my $ruleset_obj = $rover->ruleset($ruleset);
    my @OS_NAMES = $ruleset_obj->os_list;
    @OS_NAMES="ALL" if ! @OS_NAMES;

    my $os_text = "@OS_NAMES";
    $os_text =~ s/ /, /g;

    print "\t$os_text : $ruleset\n";
  }
  print "\n";

}

# Read in passwords from command line
#
if ( $auth ) {
  read_authentication($rover);
}

my $start_time = time();

# Start the real work, execute each process individually
#
$rover->run_rulesets(@rulesets, {'Hosts' => \@hosts, 'Root' => $getroot});

# All completed, report on findings.
#
report_completion_status($rover);

print "Finished. Elapsed time: ". (time() - $start_time) ." seconds.\n\n" ;

# Cleanup old log files
#
my %log_dirs = ();

opendir(LOGS, $old_logs_dir);
foreach my $file (readdir(LOGS)) {
  if ( ! -d $old_logs_dir ."/". $file ) { next; }
  if ( $file =~ m/^[\.]+$/ ) { next; }

  my @fstat = stat($old_logs_dir ."/". $file);
  $log_dirs{$file} = $fstat[10];
}
my @dirs = sort { $log_dirs{$b} <=> $log_dirs{$a} } keys %log_dirs;
if ( @dirs > 10 ) {
  my @del_dirs = @dirs[10..(@dirs-1)];
  foreach (@del_dirs) {system("rm -rf $old_logs_dir/$_");}
}

__END__

=head1 NAME

rover - Command line interface to Rover perl module

=head1 SYNOPSYS

rover [options]  [-q I<command>]  [-r I<ruleset> [-r I<ruleset> ...]]

All Options:

[-r|--ruleset <name>]  [--config-file <file>]  [--logs-dir <dir>]  [-q|--quick-command <command>]  [-S|--search <regex>]  [-p|--pick]  [-l|--list]  [-L|--long-list]  [-s|--shell]  [-f|--forks n]  [-v|--verbose]  [-d|--debug] [-u|--upgrade] [-h|--help]  [--no-auth]  [--no-banner]  [--version]


=head1 DESCRIPTION

The rover command uses the perl module Rover to execute pre-defined
rulesets on multiple hosts in parallel.  From the command line
I<rulesets> are specified using the -r flag.

An interactive shell can be entered by suplying the -s flag.  This
shell is meant to be an easy way to edit rulesets from the command line.

=head1 USAGE

=over 4

The following options can be specified:

=item -r | --ruleset I<ruleset>

=over 8

Specify to execute I<ruleset> on all hosts.  The default is to use
what is configured in I<configfile>.  See B<perldoc Rover> for
documentation specific to its format.  One or more I<rulesets> can
be specified.

=back

=item --config-file I<configfile>

=over 8

Use I<configfile> instead of the default $HOME/.rover/config.run.

=back

=item --logs-dir I<dir>

=over 8

Use I<dir> to store the logs for this run.  Note, this is not the absolute
path as rover will create subdirectories so that multiple sessions do not
interfere with each other.

=back

=item -q | --quick-command I<command>

=over 8

Take I<command> and place inside an execute() block and run this
instead of any configured rulesets.  This will be executed on
ALL os types.

=back

=item -s | --shell

=over 8

Start an interactive shell.  Inside this shell you will be prompted
to make Rover configuration changes, modify rulesets, determine what
is to be ran, and save the changes to your I<configfile>.  This
is meant to be a convenient way to create and modify rulesets.

=back

=item -p | --pick

=over 8

Interactively pick which hosts to process against.  This generates
a list of all the hosts within the hosts file and allows you to select
one or more from that list.

=back

=item -l | --list

=item -L | --long-list

=over 8

List all configured rulesets and exit.  Using -l gives you a short
list of just the ruleset names.  Using -L will print out the contents
of each ruleset.  If any rulesets are specified from the command
line, only those matching rulesets will be printed.

You may also use the long options --list and --long-list.

=back

=item -f | --forks I<processes>

=over 8

Rover is designed to run many hosts in parallel.  By default it uses
threaded processes to split the hosts up.  The default value of four(4)
can be overriden with this flag.  The name forks is kept for backwards
compatiblity, forked processes are no longer used.

=back

=item -S | --search I<regex>

=over 8

Search through the log files of the last run for I<regex>.  Regex is,
as the name implies, a regular expression string.

=back

=item -v | --verbose

=over 8

Turn up verbosity.  More -v means more verbose.  What this actually does
is increment $rover->debug, which by default is 0.

=back

=item -d | --debug

=over 8

This option turns on debugging for Rover and also Expect.  The values set
are $Rover::debug=2, $Expect::Exp_Internal=1, $Expect::Log_Stdout=1, and
$Expect::Debug=3.  It is recommended that when using this mode, only one
host is used as Rover debug + Expect debug is really noisy.

=back

=item -h | --help

=over 8

Print help message.

=back

=item -u | --upgrade

=over 8

Upgrade from previous version of Rover.  This will overwrite your current configuration.
You will be prompted for input during the actual upgrade.

This option reads, specifically, Rover 2.x files.  They included separate hosts and ruleset
configs.  The ruleset configuration was $HOME/.rover/config.run.  The hosts file was
$HOME/.rover/hosts.txt.  If you were using multiple colomns in the hosts.txt file, it will prompt you to include
that in the new config.

See the B<UPGRADING> section for more details

=back

=item --no-auth

=over 8

Do not prompt for password.  By default, rover will ask you for your user password,
and if root is required it will also ask for root passwords.

=back

=item --no-banner

=over 8

Do not print a summary of what rover is about to do.

=back

=item --version

=over 8

Print Rover version and exit.

=back

=back

=head1 EXAMPLES

The following example will display all configured rulesets:

=over 4

rover -l

=back

Here we do a long listing of ruleset Unix_Uptime:

=over 4

rover -L -r Unix_Uptime

=back

In this example we enter into an interactive shell.  There are
help menus within to assist with its usage.

=over 4

rover -s

=back

This example will search all log files of the previous run for the string
'up [0-9]+ day', a regular expression to match the unix "uptime" command
output:

=over 4

rover -S 'up [0-9]+ day'

=back

This example shows how you would set up a batch process with rover. This
assumes you have some non-password based authentication, like ssh keys,
and have copied and modified the config file in a non-standard location.

=over 4

rover --config-file /path/to/config.run --no-auth --no-banner -r Batch_Commands

=back

=head1 UPGRADING

If you are upgrading from Rover 2.x, you can use the -u or --upgrade option.
This is an interactive process that should bring in all your hosts and rulesets
from the previous version of Rover.  If you are upgrading from an older version, 
you can simply copy your config.run and hosts.txt files to the $HOME/.rover
directory and run the upgrade.

Here are the items not supported by the upgrade option:

  - rover 1.x ruleset logic
  - Expert mode rulesets
  - GENERAL settings

=head1 AUTHORS

=item Bryan A Bueter

=item Erik McLaughlin

=item Jayson A Robinson

=item John Kellner

=head1 LICENSE

This program can be used under the same terms as Perl.

=head1 DISCLAIMER

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

